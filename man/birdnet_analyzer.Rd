% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/birdnet_analyzer.R
\name{birdnet_analyzer}
\alias{birdnet_analyzer}
\title{Process audio files through BirdNET}
\usage{
birdnet_analyzer(
  birdnet.version,
  birdnet.path,
  i.audio,
  o.results,
  lat = -1,
  lon = -1,
  week = -1,
  slist = NULL,
  sensitivity = 1,
  min.conf = 0.1,
  overlap = 0,
  rtype = "r",
  threads = 1,
  batchsize = 1,
  locale = "en",
  sf.thresh = 0.03,
  classifier = NULL,
  fmin = 0,
  fmax = 15000,
  skip.existing.results = FALSE
)
}
\arguments{
\item{birdnet.version}{Character name of BirdNET release you are using. Default = "v1.1.0". If you downloaded a BirdNET .exe installer prior to that, try putting "previous" in the birdnet.version argument. If this doesn't work, update to v1.1.0 or consider constructing the command statement by hand instead of using this function. See releases at \href{https://github.com/kahst/BirdNET-Analyzer/releases}{https://github.com/kahst/BirdNET-Analyzer/releases}.}

\item{birdnet.path}{Absolute path to BirdNET-Analyzer.exe installation on your machine. e.g., "C:/path/to/BirdNET-Analyzer/BirdNET-Analyzer.exe"}

\item{i.audio}{Absolute path to input file or folder. If this is a file, o.results needs to be a file too.}

\item{o.results}{Absolute path to output file or folder. If this is a file, i.audio needs to be a file too.}

\item{lat}{Recording location latitude. Set -1 to ignore.}

\item{lon}{Recording location longitude Set -1 to ignore.}

\item{week}{Week of the year when the recording was made. Values in c(1:48) (4 weeks per month). Set -1 for year-round species list.}

\item{slist}{Absolute path to species list text file or folder. If only a folder is provided, species list needs to be named "species_list.txt". If lat and lon are provided, BirdNET-Analyzer will ignore this argument. See \href{https://github.com/kahst/BirdNET-Analyzer}{BirdNET-Analyzer} for details on formatting a species list.}

\item{sensitivity}{Detection sensitivity. higher values result in higher sensitivity. Values from 0.5 to 1.5. Default = 1.0.}

\item{min.conf}{Minimum confidence threshold. Values from 0.01 to 0.99. Default = 0.1.}

\item{overlap}{Overlap of prediction segments. Values from 0.0 to 2.9. Default = 0.0.}

\item{rtype}{Output format. Values in c('table', 'audacity', 'r', 'kaleidoscope', 'csv'). Defaults to 'r', and strongly recommend using rtype 'r' if you want to use other functions in NSNSDAcoustics.}

\item{threads}{Number of CPU threads.}

\item{batchsize}{Number of samples to process at the same time. Defaults to 1.}

\item{locale}{Locale for translated species common names. Values in c('af', 'de', 'it', ...). Defaults to 'en'.}

\item{sf.thresh}{Minimum species occurrence frequency threshold for location filter. Values from 0.01 to 0.99. Defaults to 0.03.}

\item{classifier}{(Untested argument.) Absolute path to custom trained classifier. Defaults to None. If set, lat, lon and locale are ignored.}

\item{fmin}{Minimum frequency for bandpass filter. Defaults to 0.}

\item{fmax}{Maximum frequency for bandpass filter. Defaults to 15000.}

\item{skip.existing.results}{(Untested argument.) Skip files that have already been analyzed. Default = FALSE.}
}
\value{
Saves a file of results for each audio file in results.directory. For the recommended rtype = 'r', files are csv with suffix "BirdNET.results.csv". Files contain the following columns:

\itemize{
\item{\strong{filepath}: Filepath for the processed audio file.}
\item{\strong{start}: Start time of detection in seconds.}
\item{\strong{end}: End time of detection in seconds.}
\item{\strong{scientific_name}: Species scientific name.}
\item{\strong{common_name}: Species common name.}
\item{\strong{confidence}: BirdNET's confidence level in this detection ranging from 0 (least confident) to 1 (most confident).}
\item{\strong{lat}: Latitude input used.}
\item{\strong{long}: Longitude input used.}
\item{\strong{week}: Week of year input used.}
\item{\strong{overlap}: Overlap input used.}
\item{\strong{sensitivity}: Sensitivity input used.}
\item{\strong{min_conf}: Minimum confidence input used.}
\item{\strong{species_list}: Species list used.}
\item{\strong{model}: BirdNET model used.}
}
}
\description{
This function allows a user to process audio files through \href{https://github.com/kahst/BirdNET-Analyzer}{BirdNET-Analyzer} via R's \code{\link{system}} function. It is meant for Windows users and may have unexpected results on other systems. To use this function, follow the steps outlined in the \href{https://github.com/nationalparkservice/NSNSDAcoustics/blob/main/README.md#running-birdnet-from-rstudio}{NSNSDAcoustics ReadME}. Please see \href{https://github.com/kahst/BirdNET-Analyzer}{BirdNET-Analyzer} usage documentation for more details.
}
\details{
This function was developed by the National Park Service Natural Sounds and Night Skies Division to act as a wrapper to process audio data using BirdNET.
The function has been tested on BirdNET Analyzer \href{https://github.com/kahst/BirdNET-Analyzer/releases/tag/v1.1.0}{v1.1.0}.
To use this function, follow the steps outlined in the \href{https://github.com/nationalparkservice/NSNSDAcoustics/blob/main/README.md#running-birdnet-from-rstudio}{NSNSDAcoustics ReadME}.

If there is an issue with any audio files (e.g., audio file corrupt or too short), error messaging will be returned and problematic files that were not processed in this call to the function will be recorded in a file named 'BirdNET_Problem-Files_results.directory_YYYY-MM-DD HHMMSS.csv'. Note that problem files may also occur if you have results open from previous runs and are attempting to rewrite the results while the file is still open. To help diagnose problems, birdnet_analyzer() attempts to catch error messaging and return errors to the user at the end of the function run. However, internal error catching in R from BirdNET-Analyzer's underlying Python code does not always work; you may need to rely on the "Problem-Files" result to rerun problematic files and diagnose issues.
}
\examples{
\dontrun{

# Create an audio directory for this example
dir.create('example-audio-directory')

# Read in example wave files
data(exampleAudio1)
data(exampleAudio2)

# Write example waves to example audio directory
tuneR::writeWave(
  object = exampleAudio1,
  filename = 'example-audio-directory/Rivendell_20210623_113602.wav'
)
tuneR::writeWave(
  object = exampleAudio2,
  filename = 'example-audio-directory/Rivendell_20210623_114602.wav'
)

# Create a BirdNET results directory for this example
dir.create('example-results-directory')


##### The following example is pseudocode ######

# Because this function calls an external programs (BirdNET-Analyzer.exe),
# the example function below will not be modifiable to run for you unless
# you follow the instructions given the NSNSDAcoustics documentation here:
# https://github.com/nationalparkservice/NSNSDAcoustics/blob/main/README.md

# Run all audio data in a directory through BirdNET
birdnet_analyzer(
 birdnet.version = 'v1.1.0',
 birdnet.path = 'absolute/path/AppData/Local/Programs/BirdNET-Analyzer/BirdNET-Analyzer.exe',
 audio.directory = 'absolute/path/example-audio-directory',
 results.directory = 'absolute/path/example-results-directory',
 week = -1,
 slist = 'C:/Users/cbalantic/OneDrive - DOI/Code-NPS/NSNSDAcoustics/species_list.txt',
)

# Delete all temporary example files when finished
unlink(x = 'example-audio-directory', recursive = TRUE)
unlink(x = 'example-results-directory', recursive = TRUE)

}
}
\seealso{
\code{\link{birdnet_format}}, \code{\link{birdnet_verify}}
}
