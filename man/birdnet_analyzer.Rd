% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/birdnet_analyzer.R
\name{birdnet_analyzer}
\alias{birdnet_analyzer}
\title{Run BirdNET-Analyzer from RStudio}
\usage{
birdnet_analyzer(
  audio.directory,
  audio.files,
  start = 1,
  results.directory,
  birdnet.directory,
  lat = -1,
  lon = -1,
  ovlp = 0,
  sens = 1,
  min.conf = 0.1,
  threads = 4,
  batchsize = 1,
  locale = "en",
  rtype = "r",
  sf.thresh = 0.03
)
}
\arguments{
\item{audio.directory}{Absolute path to audio files to be processed. Files are expected to have the naming convention SITEID_YYYYMMDD_HHMMSS. Default behavior is to process every file in the audio.directory through BirdNET.}

\item{audio.files}{Optional character vector of specific file names to process within the audio.directory. If missing, all files in audio.directory will be processed.}

\item{start}{Optional file number in folder to start on if data processing fails or is interrupted. Default = 1. This argument provides an alternative to the 'audio.files' argument.}

\item{results.directory}{Absolute path to directory where BirdNET results should be stored.}

\item{birdnet.directory}{Absolute path to directory where BirdNET is installed on your machine.}

\item{lat}{Recording location latitude. Set -1 to ignore.}

\item{lon}{Recording location longitude Set -1 to ignore.}

\item{ovlp}{Overlap in seconds between extracted spectrograms. Values from 0.0 to 2.9. Default = 0.0.}

\item{sens}{Detection sensitivity; higher values result in higher sensitivity. Values from 0.5 to 1.5. Default = 1.0.}

\item{min.conf}{Minimum confidence threshold. Values from 0.01 to 0.99. Default = 0.1.}

\item{threads}{Number of CPU threads.}

\item{batchsize}{Number of samples to process at the same time. Defaults to 1.}

\item{locale}{Locale for translated species common names. Values in c('af', 'de', 'it', ...). Defaults to 'en'.}

\item{rtype}{Specifies output format. BirdNET-Analyzer provides several options, but the only ones available in this function are 'r' or 'csv'. Default = 'r'. \strong{For downstream data processing, 'r' is strongly preferred.} The 'csv' option exists for dealing with outputs from the now deprecated \href{https://github.com/kahst/BirdNET-Lite}{BirdNET-Lite} (and it's accompanying R function, \code{\link{birdnet_run}}).}

\item{sf.thresh}{Minimum species occurrence frequency threshold for location filter. Values in c(0.01, 0.99). Defaults to 0.03.}
}
\value{
Saves either a txt or csv file of results for each audio file in results.directory. Files have prefix "BirdNET_".

If rtype = 'r', outputs a .txt file containing the following columns:

\itemize{
\item{\strong{filepath}: Filepath for the processed audio file.}
\item{\strong{start}: Start time of detection in seconds.}
\item{\strong{end}: End time of detection in seconds.}
\item{\strong{scientific_name}: Species scientific name.}
\item{\strong{common_name}: Species common name.}
\item{\strong{confidence}: BirdNET's confidence level in this detection ranging from 0 (least confident) to 1 (most confident).}
\item{\strong{lat}: Latitude input used.}
\item{\strong{long}: Longitude input used.}
\item{\strong{week}: Week of year.}
\item{\strong{overlap}: Overlap input used.}
\item{\strong{sensitivity}: Sensitivity input used.}
\item{\strong{min_conf}: Minimum confidence input used.}
\item{\strong{species_list}: Species list used.}
\item{\strong{model}: BirdNET model used.}
}

If rtype = 'csv', outputs a .csv containing the following columns:

\itemize{
\item{\strong{Start (s)}: Start time of detection in seconds.}
\item{\strong{End (s)}: End time of detection in seconds.}
\item{\strong{Scientific name}: Species scientific name.}
\item{\strong{Common name}: Species common name.}
\item{\strong{Confidence}: BirdNET's confidence level in this detection ranging from 0 (least confident) to 1 (most confident).}
}
}
\description{
This function uses the reticulate package to run Python from RStudio in order to process files through \href{https://github.com/kahst/BirdNET-Analyzer}{BirdNET-Analyzer}. It is meant for Windows users and may have unexpected results on other systems. To use this function, follow the steps outlined in the \href{https://github.com/nationalparkservice/NSNSDAcoustics#running-birdnet-from-rstudio-with-birdnet_analyzer}{NSNSDAcoustics ReadME}. In brief, these steps are to (1) Install BirdNET using the "Install BirdNET from zip" instructions at \href{https://github.com/kahst/BirdNET-Analyzer#setup-windows}{BirdNET-Analyzer Setup (Windows)}, (2) Download \href{https://www.anaconda.com/}{Anaconda}, (3) Set up a \href{https://github.com/nationalparkservice/NSNSDAcoustics/blob/main/README.md#3-set-up-a-conda-environment-for-birdnet-analyzer}{conda environment for BirdNET}, (4) Copy the "checkpoints" folder and eBird_taxonomy_codes_2021E.json file into your BirdNET conda environment folder. Function assumes that all files in a folder come from the same site, and that the audio files follow a SITEID_YYYYMMDD_HHMMSS naming convention. Please input absolute paths for all directory arguments (necessary due to the way RStudio is communicating with the underlying Python code). Note that BirdNET's option to input a customized species list has not been implemented in this function. Supported audio file types are wave and mp3. Please see \href{https://github.com/kahst/BirdNET-Analyzer}{BirdNET-Analyzer} usage documentation for more details.
}
\details{
This function was developed by the National Park Service Natural Sounds and Night Skies Division to act as a wrapper to process audio data using BirdNET. The example given in this function's documentation below will not run unless you have set up BirdNET-Analyzer and a conda environment as conveyed in the Description.

The function can handle .wav or .mp3 audio files. The current behavior for .mp3 files is to convert to a temporary wave file for processing, and then delete the temporary file when finished. This behavior may not be necessary on all platforms and Python / conda installations.

Internally, BirdNET-Analyzer expects a week of the year as an input. The behavior of birdnet_analyzer() is to parse the week of year from the SITEID_YYYYMMDD_HHMMSS filename using lubridate::week().

If there is an issue with any audio files (e.g., audio file corrupt or too short), error messaging will be returned and problematic files that were not processed in this call to the function will be recorded in a file named 'BirdNET_Problem-Files_results.directory_YYYY-MM-DD HHMMSS.csv'. Note that problem files may also occur if you have results open from previous runs and are attempting to rewrite the results while the file is still open. To help diagnose problems, birdnet_analyzer() attempts to catch error messaging and return errors to the user at the end of the function run. However, internal error catching in R from BirdNET-Analyzer's underlying Python code does not always work; you may need to rely on the "Problem-Files" result to rerun problematic files and diagnose issues.

NSNSDAcoustics suggests the reticulate package but does not install it for you. To use this function, please install reticulate using install.packages('reticulate').
}
\examples{
\dontrun{

# To view example outputs of raw txt BirdNET results, write to working directory
data(exampleBirdNET1)
write.table(x = exampleBirdNET1,
            file = 'BirdNET_Rivendell_20210623_113602.txt',
            row.names = FALSE, quote = FALSE, sep = ',')
data(exampleBirdNET2)
write.table(x = exampleBirdNET2,
            file = 'BirdNET_Rivendell_20210623_114602.txt',
            row.names = FALSE, quote = FALSE, sep = ',')


##### The following example is pseudocode ######

# Because this function uses two external programs (Python and BirdNET-Analyzer),
# the example function below will not be modifiable to run for you unless
# you follow the instructions given in "Description".

# Must set environment BEFORE calling in the reticulate package
Sys.setenv(RETICULATE_PYTHON = "C:/Your/Python/Path/Here/python.exe")
library(reticulate)

# Set your conda environment
use_condaenv(condaenv = "pybirdanalyze", required = TRUE)

# Create an audio directory for this example
dir.create('example-audio-directory')

# Create a results directory for this example
dir.create('example-results-directory')

# Read in example wave files
data(exampleAudio1)
data(exampleAudio2)

# Write example waves to example audio directory
tuneR::writeWave(object = exampleAudio1,
                 filename = 'example-audio-directory/Rivendell_20210623_113602.wav')
tuneR::writeWave(object = exampleAudio2,
                 filename = 'example-audio-directory/Rivendell_20210623_114602.wav')

# Run all audio data in a directory through BirdNET
birdnet_analyzer(audio.directory = 'absolute/path/example-audio-directory',
                 results.directory = 'absolute/path/example-results-directory',
                 birdnet.directory = 'absolute/path/BirdNET',
                 lat = 46.09924,
                 lon = -123.8765)

# Use optional "audio.files" argument to process specific files
birdnet_analyzer(audio.directory = 'absolute/path/example-audio-directory',
                 audio.files = 'Rivendell_20210623_113602.wav',
                 results.directory = 'absolute/path/example-results-directory',
                 birdnet.directory = 'absolute/path/BirdNET',
                 lat = 46.09924,
                 lon = -123.8765)

# Delete all temporary example files when finished
unlink(x = 'example-audio-directory', recursive = TRUE)
unlink(x = 'example-results-directory', recursive = TRUE)

}
}
\seealso{
\code{\link{birdnet_format}}, \code{\link{birdnet_verify}}
}
