% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SongMeterToNVSPL-functions.R
\name{SongMeter_To_NVSPL}
\alias{SongMeter_To_NVSPL}
\title{Calibrate and convert wave files into NVSPL format}
\usage{
SongMeter_To_NVSPL(
  input.directory,
  data.directory = TRUE,
  test.file = FALSE,
  project,
  PAMvers = "V12_noChunk",
  instrum = "SM4",
  filext = "_\%Y\%m\%d_\%H\%M\%S.wav",
  filpat = ".+\\\\d{8}_\\\\d{6}.wav",
  mhset = -35,
  Gset = 16,
  vADCset = 1,
  enviset = "Air",
  envir = 2,
  rescWat = 0,
  timezone = "GMT"
)
}
\arguments{
\item{input.directory}{Top-level input directory path to audio files to be processed. e.g. E:/AUDIO}

\item{data.directory}{Logical flag to specify whether audio files are housed in 'Data' subdirectories}

\item{test.file}{Logical flag for whether to test a file. If TRUE, tests a single file and produces plots and diagnostic outputs. If FALSE, processes entire audio dataset indicated by input.directory.}

\item{project}{File name for your project (e.g., 'GLBAPhenology2019')}

\item{PAMvers}{Version of PAMGuide (e.g., 'PAMGUIDE_V12noChunk')}

\item{instrum}{Audio recorder used (e.g., 'SM4')}

\item{filext}{File extension pattern (e.g, '\emph{\%Y\%m\%d}\%H\%M\%S.wav'). If using split files, '\emph{0}\%Y\%m\%d_\%H\%M\%S_000.wav'.}

\item{filpat}{File pattern}

\item{mhset}{Microphone sensitivity dBV/Pa (see for more info https://doimspp.sharepoint.com/sites/nsnsdallstaff/Shared\%20Documents/Science\%20and\%20Tech/Software/SongMeterToNVSPL/SongMeter4toNVSPL.mp4)}

\item{Gset}{Gain settings}

\item{vADCset}{Zero-peak}

\item{enviset}{Use 'Air' or 'Wat' to indicate whether audio recordings occurred in a terrestrial or underwater environment, respectively.}

\item{envir}{Use 1 or water and 2 for air. (CB: I am not sure the difference/utility of having this argument vs. the previous one?)}

\item{rescWat}{Use 1 if you want to re-scale underwater values to be able to plot using AMT, 0 if not}

\item{timezone}{Specify timezone used in the SongMeter (e.g, 'GMT')}
}
\value{
If test.file = TRUE, returns diagnostics. If test.file = FALSE, returns NVSPL txt files in NVSPL folder generated by the function. \strong{NOTE TO SELF: we need to go through and document every column in the output of this --i.e. what does INVID and GChar1 etc etc mean -- where is metadata located for this?}
}
\description{
This function uses PAMGuide code to convert wave files into NVSPL format. PAMGuide was developed by Nathan D. Merchant et al. 2015 (see \strong{Details}). The suggested workflow for this function is to first set test.file = TRUE to test that your workflow has been accurately parameterized. Next, to batch process NVSPLs, run with test.file = FALSE.
}
\details{
This function was developed by the National Park Service Natural Sounds and Night Skies Division to act as a wrapper to PAMGuide that would support NSNSD data processing workflows. PAMGuide was published as supplementary material to the following Open Access journal article:

\href{https://besjournals.onlinelibrary.wiley.com/doi/full/10.1111/2041-210X.12330}{Merchant, N.D., Fristrup, K.M., Johnson, M.P., Tyack, P.L., Witt, M.J., Blondel, P., Parks, S.E. (2015). Measuring acoustic habitats. Methods in Ecology and Evolution.}

\itemize{
\item{\href{https://besjournals.onlinelibrary.wiley.com/action/downloadSupplement?doi=10.1111\%2F2041-210X.12330&file=mee312330-sup-0001-AppendixS1.pdf}{View accompanying PAMGuide tutorial}}
\item{\href{https://sourceforge.net/projects/pamguide/}{Download original PAMGuide code}}
}
}
\examples{
\dontrun{

# Create an input directory for this example
dir.create('example-input-directory')

# Read in example wave file
data(exampleAudio)

# Write example wave to example input directory
tuneR::writeWave(object = exampleAudio,
                 filename = 'example-input-directory/GLBABART_20200528_104200.wav')

# Write the same example wave file twice, but give it a fake different name
# this time (SongMeter_To_NVSPL expects to process multiple files, so we're
# generating a second "fake" wave file here to demonstrate the function example)
tuneR::writeWave(object = exampleAudio,
                 filename = 'example-input-directory/GLBABART_20200528_114157.wav')

# Perform SongMeter_To_NVSPL in test mode (test.file = TRUE)
SongMeter_To_NVSPL(
 input.directory = 'example-input-directory',
 data.directory = FALSE,
 test.file = TRUE,
 project = 'testproject',
 timezone = 'GMT')

# Perform SongMeter_To_NVSPL in batch mode (test.file = FALSE)
SongMeter_To_NVSPL(
 input.directory = 'example-input-directory',
 data.directory = FALSE,
 test.file = FALSE,
 project = 'testproject',
 timezone = 'GMT')

# Verify that NVSPL outputs have been created
nvspls <- list.files('example-input-directory/NVSPL', full.names = TRUE)

# View one of the NVSPL outputs
one.nvspl <- read.delim(file = nvspls[1], sep = ',')

# Delete all temporary example files when finished
unlink(x = 'example-input-directory', recursive = TRUE)

}

}
\seealso{
\code{\link{NVSPL_To_AI}}
}
